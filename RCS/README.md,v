head	1.12;
access;
symbols;
locks
	scarol:1.12; strict;
comment	@# @;


1.12
date	2025.10.21.19.17.19;	author scarol;	state Exp;
branches;
next	1.11;

1.11
date	2025.10.21.18.36.36;	author scarol;	state Exp;
branches;
next	1.10;

1.10
date	2025.10.21.18.24.15;	author scarol;	state Exp;
branches;
next	1.9;

1.9
date	2025.10.21.18.02.24;	author scarol;	state Exp;
branches;
next	1.8;

1.8
date	2025.10.20.12.33.19;	author scarol;	state Exp;
branches;
next	1.7;

1.7
date	2025.10.20.12.02.04;	author scarol;	state Exp;
branches;
next	1.6;

1.6
date	2025.10.20.01.35.39;	author scarol;	state Exp;
branches;
next	1.5;

1.5
date	2025.10.20.01.26.10;	author scarol;	state Exp;
branches;
next	1.4;

1.4
date	2025.10.20.01.13.30;	author scarol;	state Exp;
branches;
next	1.3;

1.3
date	2025.10.20.00.52.40;	author scarol;	state Exp;
branches;
next	1.2;

1.2
date	2025.10.20.00.21.52;	author scarol;	state Exp;
branches;
next	1.1;

1.1
date	2025.10.20.00.11.37;	author scarol;	state Exp;
branches;
next	;


desc
@@


1.12
log
@*** empty log message ***
@
text
@# 950-Codex1

Table rendering utilities and supporting scripts.

## Overview

The main entry point is the `table_tool` Python package (`python -m table_tool`), which turns delimited text into an aligned table. Text borders are used by default and you can opt into Unicode box-drawing characters. The project ships with automated tests plus helper scripts under `scripts/` (for example, `vdiff2.sh` for comparing recent RCS revisions).

## Usage

Render a table from a file (commands assume you run from the project root with `PYTHONPATH=src` so the package can be discovered):

```bash
PYTHONPATH=src python3 -m table_tool path/to/data.txt
```

Read from standard input instead:

```bash
echo "left|right" | PYTHONPATH=src python3 -m table_tool -
```

The script emits formatted table output to stdout and reports validation errors to stderr (e.g., missing files or empty input).

Use `-d`/`--delimiter` to choose a different single-character separator. The default is `|`, and the allowed values are space (`" "`), `-`, `/`, `|`, and `,`:

```bash
PYTHONPATH=src python3 -m table_tool -d , path/to/data.csv
```

Use `-b`/`--thick-border-interval` to insert a thicker border (drawn with `=`) after every _n_ data rows. The default value is `3`; set it to `0` to disable thicker separators or to `x` to suppress borders completely:

```bash
PYTHONPATH=src python3 -m table_tool -b 5 path/to/data.txt
# no borders at all
PYTHONPATH=src python3 -m table_tool -b x path/to/data.txt
```

Pass `-t`/`--transpose` to swap rows and columns before rendering:

```bash
PYTHONPATH=src python3 -m table_tool -t path/to/data.txt
```

Select a border style with `-s`/`--style` (`t` for ASCII text, `g` for Unicode box drawing):

```bash
# Explicitly select ASCII (default)
PYTHONPATH=src python3 -m table_tool -s t path/to/data.txt

# Unicode borders
PYTHONPATH=src python3 -m table_tool -s g path/to/data.txt
```

Strip borders and paddings from an existing table to recover delimited data with `-r`/`--remove`. The tool auto-detects whether the input uses ASCII or Unicode borders, but you can still pass `-s` to override it:

```bash
# Convert a rendered table back into comma-delimited rows
PYTHONPATH=src python3 -m table_tool -r -d , formatted-table.txt
```

## Development

Install dependencies and run tests with [uv](https://github.com/astral-sh/uv):

```bash
uv run python -m pytest
```

RCS is used for version control at the file level. New and modified files are checked in with `ci -l <file>`, which keeps the working copy locked for further edits.

### vdiff2 helper

`scripts/vdiff2.sh` wraps `vimdiff` to compare RCS revisions:

```bash
# Latest two revisions
./scripts/vdiff2.sh 950-010-table.py

# A specific revision against its predecessor
./scripts/vdiff2.sh 950-010-table.py 1.6

# Two explicit revisions
./scripts/vdiff2.sh 950-010-table.py 1.6 1.3

# Compare the working tree against the most recent revision
./scripts/vdiff2.sh -w 950-010-table.py
```

Pass `-w` with an optional revision number to diff that revision against the working file. Without revisions, the script chooses the most recent revision automatically.

Run the helperâ€™s tests alongside the main suite:

```bash
uv run python -m pytest tests/test_vdiff2.py
```

## Roadmap

- (done) Add a `-d` option to configure the input delimiter (default `|`).
- (done) Support thicker borders after every _n_ rows; column grouping is still pending.
- (done) Offer an option to use extended graphics characters.
- (done) Provide a transpose mode for rotating the table output.
@


1.11
log
@*** empty log message ***
@
text
@d7 1
a7 1
The main entry point is `950-010-table.py`, a command-line tool that turns delimited text into an aligned table. Text borders are used by default and you can opt into Unicode box-drawing characters. The project ships with automated tests plus a helper script, `vdiff2.sh`, for comparing recent RCS revisions.
d11 1
a11 1
Render a table from a file:
d14 1
a14 1
python3 950-010-table.py path/to/data.txt
d20 1
a20 1
echo "left|right" | python3 950-010-table.py -
d28 1
a28 1
python3 950-010-table.py -d , path/to/data.csv
d34 1
a34 1
python3 950-010-table.py -b 5 path/to/data.txt
d36 1
a36 1
python3 950-010-table.py -b x path/to/data.txt
d42 1
a42 1
python3 950-010-table.py -t path/to/data.txt
d49 1
a49 1
python3 950-010-table.py -s t path/to/data.txt
d52 1
a52 1
python3 950-010-table.py -s g path/to/data.txt
d59 1
a59 1
python3 950-010-table.py -r -s g -d , formatted-table.txt
d74 1
a74 1
`vdiff2.sh` wraps `vimdiff` to compare RCS revisions:
d78 1
a78 1
./vdiff2.sh 950-010-table.py
d81 1
a81 1
./vdiff2.sh 950-010-table.py 1.6
d84 1
a84 1
./vdiff2.sh 950-010-table.py 1.6 1.3
d87 1
a87 1
./vdiff2.sh -w 950-010-table.py
@


1.10
log
@*** empty log message ***
@
text
@d55 1
a55 1
Strip borders and paddings from an existing table to recover delimited data with `-r`/`--remove`:
@


1.9
log
@*** empty log message ***
@
text
@d48 3
d53 7
@


1.8
log
@*** empty log message ***
@
text
@d3 1
a3 1
Unicode table rendering utilities and supporting scripts.
d7 1
a7 1
The main entry point is `950-010-table.py`, a command-line tool that turns delimited text into an aligned table using Unicode box-drawing characters. The project ships with automated tests plus a helper script, `vdiff2.sh`, for comparing recent RCS revisions.
d23 1
a23 1
The script emits formatted Unicode output to stdout and reports validation errors to stderr (e.g., missing files or empty input).
d43 7
@


1.7
log
@*** empty log message ***
@
text
@d55 3
a57 1
The helper script `vdiff2.sh` opens `vimdiff` on the two most recent RCS revisions of a file:
d60 1
d62 17
d86 1
a86 1
- Provide a transpose mode for rotating the table output.
@


1.6
log
@minor
@
text
@d39 6
@


1.5
log
@*** empty log message ***
@
text
@d59 1
a59 1
- Offer an option to use extended graphics characters.
@


1.4
log
@*** empty log message ***
@
text
@d31 1
a31 1
Use `-b`/`--thick-border-interval` to insert a thicker border (drawn with `=`) after every _n_ data rows. The default value is `3`; set it to `0` to disable thicker separators entirely:
d35 2
@


1.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
ASCII table rendering utilities and supporting scripts.
d7 1
a7 1
The main entry point is `950-010-table.py`, a command-line tool that turns delimited text into an aligned ASCII table. The project ships with automated tests plus a helper script, `vdiff2.sh`, for comparing recent RCS revisions.
d23 1
a23 1
The script emits formatted output to stdout and reports validation errors to stderr (e.g., missing files or empty input).
@


1.2
log
@*** empty log message ***
@
text
@d7 1
a7 1
The main entry point is `950-010-table.py`, a command-line tool that turns pipe-delimited text into an aligned ASCII table. The project ships with automated tests plus a helper script, `vdiff2.sh`, for comparing recent RCS revisions.
d31 6
d55 2
a56 2
- Add a `-d` option to configure the input delimiter (default `|`).
- Support drawing thicker borders after every _n_ rows or columns.
@


1.1
log
@Initial revision
@
text
@d25 6
@
